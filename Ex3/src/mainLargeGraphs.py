import time

from GraphAlgo import GraphAlgo


def check():
    check1000()
    # check10000()
    # check100000()

def check1000():
    """ This function tests the naming, basic testing over 1000Nodes json file.
      :return:
      """
    g_algo = GraphAlgo()
    file = 'C:\\Users\hadar\PycharmProjects\Ex3\data\\1000Nodes.json'
    begin = time.time()
    g_algo.load_from_json(file)
    end = time.time()
    print("the time it took for the function load_from_json to run is: {} sec.".format(end - begin))
    begin = time.time()
    g_algo.save_to_json(file + "_edited")
    end = time.time()
    print("the time it took for the function save_to_json to run is: {} sec.".format(end - begin))
    begin = time.time()
    dist, path = g_algo.shortest_path(1, 7)
    print(dist, path)
    end = time.time()
    print("the time it took for the function shortest_path to run is: {} sec.".format(end - begin))
    begin = time.time()
    dist, path = g_algo.shortest_path(47, 19)
    print(dist, path)
    end = time.time()
    print("the time it took for the function shortest_path to run is: {} sec.".format(end - begin))
    begin = time.time()
    dist, path = g_algo.shortest_path(20, 2)
    print(dist, path)
    end = time.time()
    print("the time it took for the function shortest_path to run is: {} sec.".format(end - begin))
    begin = time.time()
    dist, path = g_algo.shortest_path(2, 20)
    print(dist, path)
    end = time.time()
    print("the time it took for the function shortest_path to run is: {} sec.".format(end - begin))
    begin = time.time()
    print(g_algo.TSP([1, 2, 3]))
    end = time.time()
    print("the time it took for the function TSP to run is: {} sec.".format(end - begin))
    # begin = time.time()
    # print(g_algo.centerPoint())
    # end = time.time()
    # print("the time it took for the function centerPoint to run is: {} sec.".format(end - begin))
    g_algo.plot_graph()

def check10000():
    """ This function tests the naming, basic testing over 10000Nodes json file.
      :return:
      """
    g_algo = GraphAlgo()
    file = 'C:\\Users\hadar\PycharmProjects\Ex3\data\\10000Nodes.json'
    begin = time.time()
    g_algo.load_from_json(file)
    end = time.time()
    print("the time it took for the function load_from_json to run is: {} sec.".format(end - begin))
    begin = time.time()
    g_algo.save_to_json(file + "_edited")
    end = time.time()
    print("the time it took for the function save_to_json to run is: {} sec.".format(end - begin))
    begin = time.time()
    dist, path = g_algo.shortest_path(1, 7)
    print(dist, path)
    end = time.time()
    print("the time it took for the function shortest_path to run is: {} sec.".format(end - begin))
    begin = time.time()
    dist, path = g_algo.shortest_path(47, 19)
    print(dist, path)
    end = time.time()
    print("the time it took for the function shortest_path to run is: {} sec.".format(end - begin))
    begin = time.time()
    dist, path = g_algo.shortest_path(20, 2)
    print(dist, path)
    end = time.time()
    print("the time it took for the function shortest_path to run is: {} sec.".format(end - begin))
    begin = time.time()
    dist, path = g_algo.shortest_path(2, 20)
    print(dist, path)
    end = time.time()
    print("the time it took for the function shortest_path to run is: {} sec.".format(end - begin))
    begin = time.time()
    print(g_algo.TSP([1, 2, 3]))
    end = time.time()
    print("the time it took for the function TSP to run is: {} sec.".format(end - begin))
    # begin = time.time()
    # print(g_algo.centerPoint())
    # end = time.time()
    # print("the time it took for the function centerPoint to run is: {} sec.".format(end - begin))
    # g_algo.plot_graph()

def check100000():
    """ This function tests the naming, basic testing over 100000Nodes json file.
      :return:
      """
    g_algo = GraphAlgo()
    file = 'C:\\Users\hadar\PycharmProjects\Ex3\data\\100000.json'
    begin = time.time()
    g_algo.load_from_json(file)
    end = time.time()
    print("the time it took for the function load_from_json to run is: {} sec.".format(end - begin))
    begin = time.time()
    g_algo.save_to_json(file + "_edited")
    end = time.time()
    print("the time it took for the function save_to_json to run is: {} sec.".format(end - begin))
    begin = time.time()
    dist, path = g_algo.shortest_path(1, 7)
    print(dist, path)
    end = time.time()
    print("the time it took for the function shortest_path to run is: {} sec.".format(end - begin))
    begin = time.time()
    dist, path = g_algo.shortest_path(47, 19)
    print(dist, path)
    end = time.time()
    print("the time it took for the function shortest_path to run is: {} sec.".format(end - begin))
    begin = time.time()
    dist, path = g_algo.shortest_path(20, 2)
    print(dist, path)
    end = time.time()
    print("the time it took for the function shortest_path to run is: {} sec.".format(end - begin))
    begin = time.time()
    dist, path = g_algo.shortest_path(2, 20)
    print(dist, path)
    end = time.time()
    print("the time it took for the function shortest_path to run is: {} sec.".format(end - begin))
    begin = time.time()
    print(g_algo.TSP([1, 2, 3]))
    end = time.time()
    print("the time it took for the function TSP to run is: {} sec.".format(end - begin))
    # begin = time.time()
    # print(g_algo.centerPoint())
    # end = time.time()
    # print("the time it took for the function centerPoint to run is: {} sec.".format(end - begin))
    # g_algo.plot_graph()

if __name__ == '__main__':
    check()

